msgid ""
msgstr ""
"Project-Id-Version: l 10n_mix\n"
"PO-Revision-Date: 2015-05-20 22:52+0900\n"
"Last-Translator: 小田 照敬 <EMAIL@ADDRESS>\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. TRANSLATORS: def Mix.compilers()
#: lib/mix.ex:213
msgid ""
"Returns the default compilers used by Mix.\n"
"\n"
"It can be used in your `mix.exs` to prepend or\n"
"append new compilers to Mix:\n"
"\n"
"    def project do\n"
"      [compilers: Mix.compilers ++ [:foo, :bar]]\n"
"    end\n"
"\n"
msgstr ""

#. TRANSLATORS: def Mix.env()
#: lib/mix.ex:187
msgid "Returns the mix environment.\n"
msgstr ""

#. TRANSLATORS: def Mix.shell()
#: lib/mix.ex:225
msgid ""
"The shell is a wrapper for doing IO.\n"
"\n"
"It contains conveniences for asking the user information,\n"
"printing status and so forth. It is also swappable,\n"
"allowing developers to use a test shell that simply sends the\n"
"messages to the current process.\n"
msgstr ""

#. TRANSLATORS: def Mix.shell(shell)
#: lib/mix.ex:232
msgid "Sets the current shell.\n"
msgstr ""

#. TRANSLATORS: def Mix.raise(message)
#: lib/mix.ex:239
msgid "Raises a mix error that is nicely formatted.\n"
msgstr ""

#. TRANSLATORS: def Mix.raise(exception, opts)
#: lib/mix.ex:250
msgid ""
"Raises a mix compatible exception.\n"
"\n"
"A mix compatible exception has a `mix` field which mix\n"
"uses to store the project or application name which is\n"
"automatically by the formatting tools.\n"
msgstr ""

#. TRANSLATORS: Elixir.Mix Summary
#: lib/mix.ex:1
msgid ""
"Mix is a build tool that provides tasks for creating, compiling,\n"
"testing Elixir projects, as well as handle dependencies, and more.\n"
"\n"
"## Mix.Project\n"
"\n"
"The foundation of Mix is a project. A project can be defined by using\n"
"`Mix.Project` in a module, usually placed in a file named `mix.exs`:\n"
"\n"
"    defmodule MyApp.Mixfile do\n"
"      use Mix.Project\n"
"\n"
"      def project do\n"
"        [app: :my_app,\n"
"         version: \"1.0.0\"]\n"
"      end\n"
"    end\n"
"\n"
"The `project/0` function is where the project information is defined\n"
"and it allows developers to configure many tasks.\n"
"\n"
"After the project above is defined, there are many tasks one can\n"
"run directly from the command line:\n"
"\n"
"  * `mix compile` - compiles the current project\n"
"  * `mix test` - runs tests for the given project\n"
"  * `mix run` - runs a particular command inside the project\n"
"\n"
"Each task has its own options and sometimes specific configuration\n"
"to be defined in the `project/0` function. You can use `mix help`\n"
"to list all available tasks and `mix help NAME` to show help for\n"
"a particular task.\n"
"\n"
"The best way to get started with your first project is by calling\n"
"`mix new my_project` from the command line.\n"
"\n"
"## Mix.Task\n"
"\n"
"Tasks are what make Mix extensible.\n"
"\n"
"Any project can extend Mix behaviour by adding their own tasks. For\n"
"example, you can add the task below inside your project and it will\n"
"be available to everyone that uses your project:\n"
"\n"
"    defmodule Mix.Tasks.Hello do\n"
"      use Mix.Task\n"
"\n"
"      def run(_) do\n"
"        Mix.shell.info \"hello\"\n"
"      end\n"
"    end\n"
"\n"
"Now they can invoke it with `mix hello`.\n"
"\n"
"## Dependencies\n"
"\n"
"Another important feature in Mix is that it is able to manage your\n"
"dependencies and integrates nicely with [the Hex package manager](http://hex."
"pm).\n"
"\n"
"In order to use dependencies, you just need to add a `:deps` key\n"
"to your project configuration. We often extract the dependencies\n"
"listing to its own functions:\n"
"\n"
"    defmodule MyApp.Mixfile do\n"
"      use Mix.Project\n"
"\n"
"      def project do\n"
"        [app: :my_app,\n"
"         version: \"1.0.0\",\n"
"         deps: deps]\n"
"      end\n"
"\n"
"      defp deps do\n"
"        [{:ecto, \"~> 0.2.5\"},\n"
"         {:plug, github: \"elixir-lang/plug\"}]\n"
"      end\n"
"    end\n"
"\n"
"You can run `mix help deps` to learn more about dependencies in Mix.\n"
"\n"
"## Environments\n"
"\n"
"Mix provides environments.\n"
"\n"
"Environments allow developers to prepare and organize their project\n"
"specifically for different scenarios. By default, Mix provides three\n"
"environments:\n"
"\n"
"  * `:dev` - the default environment\n"
"  * `:test` - the environment `mix test` runs on\n"
"  * `:prod` - the environment your dependencies runs on\n"
"\n"
"The environment can be changed via the command line by setting\n"
"the `MIX_ENV` environment variable, for example:\n"
"\n"
"    $ MIX_ENV=prod mix run server.exs\n"
"\n"
"## Aliases\n"
"\n"
"Aliases are shortcuts or tasks specific to the current project.\n"
"\n"
"In the `Mix.Task` section, we have defined a task that would be\n"
"available to everyone using our project as a dependency. What if\n"
"we wanted the task to only be available for our project? Just\n"
"define an alias:\n"
"\n"
"    defmodule MyApp.Mixfile do\n"
"      use Mix.Project\n"
"\n"
"      def project do\n"
"        [app: :my_app,\n"
"         version: \"1.0.0\",\n"
"         aliases: aliases]\n"
"      end\n"
"\n"
"      defp aliases do\n"
"        [c: \"compile\",\n"
"         hello: &hello/1]\n"
"      end\n"
"\n"
"      defp hello(_) do\n"
"        Mix.shell.info \"Hello world\"\n"
"      end\n"
"    end\n"
"\n"
"In the example above, we have defined two aliases. One is `mix c`\n"
"which is a shortcut for `mix compile`. The other is named\n"
"`mix hello`, which is the equivalent to the `Mix.Tasks.Hello`\n"
"we have defined in the `Mix.Task` section.\n"
"\n"
"Aliases may also be lists, specifying multiple tasks to run\n"
"at once:\n"
"\n"
"    [all: [&hello/1, \"deps.get --only #{Mix.env}\", \"compile\"]]\n"
"\n"
"In the example above, we have defined an alias named `mix all`,\n"
"that prints hello, then fetches dependencies specific to the\n"
"current environment and compiles it.\n"
"\n"
"Arguments given to the alias will be appended to the arguments\n"
"of the last task in the list, if the last task is a function\n"
"they will be given as a list of strings to the function.\n"
"\n"
"Finally, aliases can also be use to augment existing tasks.\n"
"Let's suppose you want to augment `mix clean` to clean another\n"
"directory Mix does not know about:\n"
"\n"
"    [clean: [\"clean\", &clean_extra/1]]\n"
"\n"
"Where `&clean_extra/1` would be a function in your `mix.exs`\n"
"with extra clean up logic.\n"
"\n"
"Note aliases do not show up on `mix help`.\n"
msgstr ""

#. TRANSLATORS: def Mix.env(env)
#: lib/mix.ex:198
msgid ""
"Changes the current mix env.\n"
"\n"
"Be careful when invoking this function as any project\n"
"configuration won't be reloaded.\n"
msgstr ""
