#. TRANSLATORS: def Mix.Project.deps_path(config \\ config())
#: lib/mix/project.ex:217 
msgid ""
"Returns the path to store dependencies for this project.\n"
"\n"
"The returned path will be expanded.\n"
"\n"
"## Examples\n"
"\n"
"    Mix.Project.deps_path\n"
"    #=> \"/path/to/project/deps\"\n"
"\n"
msgstr ""
#. TRANSLATORS: def Mix.Project.build_path(config \\ config())
#: lib/mix/project.ex:240 
msgid ""
"Returns the build path for this project.\n"
"\n"
"The returned path will be expanded.\n"
"\n"
"## Examples\n"
"\n"
"    Mix.Project.build_path\n"
"    #=> \"/path/to/project/_build/shared\"\n"
"\n"
"If :build_per_environment is set to true (the default), it\n"
"will create a new build per environment:\n"
"\n"
"    Mix.env\n"
"    #=> :dev\n"
"    Mix.Project.build_path\n"
"    #=> \"/path/to/project/_build/dev\"\n"
"\n"
msgstr ""
#. TRANSLATORS: def Mix.Project.manifest_path(config \\ config())
#: lib/mix/project.ex:263 
msgid ""
"The path to store manifests.\n"
"\n"
"By default they are stored in the app path\n"
"inside the build directory but it may be changed\n"
"in future releases.\n"
"\n"
"The returned path will be expanded.\n"
"\n"
"## Examples\n"
"\n"
"    Mix.Project.manifest_path\n"
"    #=> \"/path/to/project/_build/shared/lib/app\"\n"
"\n"
msgstr ""
#. TRANSLATORS: def Mix.Project.get!()
#: lib/mix/project.ex:114 
msgid ""
"Same as `get/0`, but raises an exception if there is no current project.\n"
"\n"
"This is usually called by tasks that need additional\n"
"functions on the project to be defined. Since such\n"
"tasks usually depend on a project being defined, this\n"
"function raises `Mix.NoProjectError` in case no project\n"
"is available.\n"
msgstr ""
#. TRANSLATORS: def Mix.Project.in_project(app, path, post_config \\ [], fun)
#: lib/mix/project.ex:182 
msgid ""
"Runs the given `fun` inside the given project.\n"
"\n"
"This function changes the current working directory and\n"
"loads the project at the given directory onto the project\n"
"stack.\n"
"\n"
"A `post_config` can be passed that will be merged into\n"
"the project configuration.\n"
msgstr ""
#. TRANSLATORS: def Mix.Project.config()
#: lib/mix/project.ex:133 
msgid ""
"Returns the project configuration.\n"
"\n"
"If there is no project defined, it still returns a keyword\n"
"list with default values. This allows many mix tasks to work\n"
"without the need for an underlying project.\n"
"\n"
"Note this configuration is cached once the project is\n"
"pushed into the stack. Calling it multiple times won't\n"
"cause it to be recomputed.\n"
"\n"
"Do not use `Mix.Project.config` to rely on runtime configuration.\n"
"Use it only to configure aspects of your project (like\n"
"compilation directories) and not your application runtime.\n"
msgstr ""
#. TRANSLATORS: def Mix.Project.compile_path(config \\ config())
#: lib/mix/project.ex:302 
msgid ""
"Returns the paths this project compiles to.\n"
"\n"
"The returned path will be expanded.\n"
"\n"
"## Examples\n"
"\n"
"    Mix.Project.compile_path\n"
"    #=> \"/path/to/project/_build/shared/lib/app/ebin\"\n"
"\n"
msgstr ""
#. TRANSLATORS: def Mix.Project.app_path(config \\ config())
#: lib/mix/project.ex:278 
msgid ""
"Returns the application path inside the build.\n"
"\n"
"The returned path will be expanded.\n"
"\n"
"## Examples\n"
"\n"
"    Mix.Project.app_path\n"
"    #=> \"/path/to/project/_build/shared/lib/app\"\n"
"\n"
msgstr ""
#. TRANSLATORS: def Mix.Project.load_paths(config \\ config())
#: lib/mix/project.ex:339 
msgid ""
"Returns all load paths for this project.\n"
msgstr ""
#. TRANSLATORS: def Mix.Project.config_files()
#: lib/mix/project.ex:149 
msgid ""
"Returns a list of project configuration files for this project.\n"
"\n"
"This function is usually used in compilation tasks to trigger\n"
"a full recompilation whenever such configuration files change.\n"
"\n"
"By default it includes the mix.exs file, the lock manifest and\n"
"all config files in the `config` directory.\n"
msgstr ""
#. TRANSLATORS: def Mix.Project.umbrella?(config \\ config())
#: lib/mix/project.ex:168 
msgid ""
"Returns `true` if project is an umbrella project.\n"
msgstr ""
#. TRANSLATORS: def Mix.Project.get()
#: lib/mix/project.ex:98 
msgid ""
"Retrieves the current project if there is one.\n"
"\n"
"Otherwise `nil` is returned. It may happen in cases\n"
"there is no mixfile in the current directory.\n"
"\n"
"If you expect a project to be defined, i.e. it is a\n"
"requirement of the current task, you should call\n"
"`get!/0` instead.\n"
msgstr ""
#. TRANSLATORS: Elixir.Mix.Project Summary
#: lib/mix/project.ex:1 
msgid ""
"Defines and manipulate Mix projects.\n"
"\n"
"In order to configure Mix, a developer needs to use\n"
"`Mix.Project` in a module and define a function named\n"
"`project` that returns a keyword list with configuration.\n"
"\n"
"    defmodule MyApp do\n"
"      use Mix.Project\n"
"\n"
"      def project do\n"
"        [app: :my_app,\n"
"         version: \"0.6.0\"]\n"
"      end\n"
"    end\n"
"\n"
"After being defined, the configuration for this project can be read\n"
"as `Mix.Project.config/0`. Notice that `config/0` won't fail if a\n"
"project is not defined; this allows many mix tasks to work\n"
"without a project.\n"
"\n"
"In case the developer needs a project or wants to access a special\n"
"function in the project, the developer can call `Mix.Project.get!/0`\n"
"which fails with `Mix.NoProjectError` in case a project is not\n"
"defined.\n"
"\n"
"## Erlang projects\n"
"\n"
"Mix can be used to manage Erlang projects that don't have any Elixir code. To\n"
"ensure mix tasks work correctly for an Erlang project, `language: :erlang`\n"
"has to be added to `project`.\n"
"\n"
"The setting also makes sure Elixir is not added as a dependency to the\n"
"generated .app file or to the escript generated with `mix escript.build`,\n"
"etc.\n"
msgstr ""
#. TRANSLATORS: def Mix.Project.build_structure(config \\ config(), opts \\ [])
#: lib/mix/project.ex:314 
msgid ""
"Builds the project structure for the current application.\n"
"\n"
"## Options\n"
"\n"
"  * `:symlink_ebin` - symlink ebin instead of copying it\n"
"\n"
msgstr ""
