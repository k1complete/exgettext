#. TRANSLATORS: def Mix.Compilers.Erlang.clean(manifest)
#: lib/mix/compilers/erlang.ex:98 
msgid ""
"Removes compiled files.\n"
msgstr ""
#. TRANSLATORS: def Mix.Compilers.Erlang.compile(manifest, tuples, callback)
#: lib/mix/compilers/erlang.ex:57 
msgid ""
"Compiles the given src/dest tuples.\n"
"\n"
"A manifest file and a callback to be invoked for each src/dest pair\n"
"must be given. A src/dest pair where destination is nil is considered\n"
"to be up to date and won't be (re-)compiled.\n"
msgstr ""
#. TRANSLATORS: def Mix.Compilers.Erlang.compile(manifest, mappings, src_ext, dest_ext, force, callback)
#: lib/mix/compilers/erlang.ex:43 
msgid ""
"Compiles the files in `src_dirs` with given extensions into\n"
"the destination, automatically invoking the callback for each\n"
"stale input and output pair (or for all if `force` is true) and\n"
"removing files that no longer have a source, while keeping the\n"
"manifest up to date.\n"
"\n"
"## Examples\n"
"\n"
"For example, a simple compiler for Lisp Flavored Erlang\n"
"would be implemented like:\n"
"\n"
"    manifest = Path.join Mix.Project.manifest_path, \".compile.lfe\"\n"
"    dest = Mix.Project.compile_path\n"
"\n"
"    compile manifest, [{\"src\", dest}], :lfe, :beam, opts[:force], fn\n"
"      input, output ->\n"
"        :lfe_comp.file(to_erl_file(input),\n"
"                       [output_dir: Path.dirname(output)])\n"
"    end\n"
"\n"
"The command above will:\n"
"\n"
"  1. look for files ending with the `lfe` extension in `src`\n"
"     and their `beam` counterpart in `ebin`\n"
"\n"
"  2. for each stale file (or for all if `force` is true),\n"
"     invoke the callback passing the calculated input\n"
"     and output\n"
"\n"
"  3. update the manifest with the newly compiled outputs\n"
"\n"
"  4. remove any output in the manifest that that does not\n"
"     have an equivalent source\n"
"\n"
"The callback must return `{:ok, mod}` or `:error` in case\n"
"of error. An error is raised at the end if any of the\n"
"files failed to compile.\n"
msgstr ""
#. TRANSLATORS: def Mix.Compilers.Erlang.to_erl_file(file)
#: lib/mix/compilers/erlang.ex:107 
msgid ""
"Converts the given file to a format accepted by\n"
"the Erlang compilation tools.\n"
msgstr ""
