msgid ""
msgstr ""
"Project-Id-Version: l 10n_mix\n"
"PO-Revision-Date: 2015-05-20 22:52+0900\n"
"Last-Translator: 小田 照敬 <EMAIL@ADDRESS>\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. TRANSLATORS: def Mix.Config.validate!(config)
#: lib/mix/config.ex:170
msgid "Validates a configuration.\n"
msgstr ""

#. TRANSLATORS: def Mix.Config.read_wildcard!(config, path)
#: lib/mix/config.ex:148
msgid ""
"Reads many configuration files given by wildcard into a single config.\n"
msgstr ""

#. TRANSLATORS: def Mix.Config.read!(file)
#: lib/mix/config.ex:129
msgid "Reads and validates a configuration file.\n"
msgstr ""

#. TRANSLATORS: def Mix.Config.persist(config)
#: lib/mix/config.ex:160
msgid ""
"Persists the given configuration by modifying\n"
"the configured applications environment.\n"
msgstr ""

#. TRANSLATORS: Elixir.Mix.Config Summary
#: lib/mix/config.ex:1
msgid ""
"Module for defining, reading and merging app configurations.\n"
"\n"
"Most commonly, this module is used to define your own configuration:\n"
"\n"
"    use Mix.Config\n"
"\n"
"    config :plug,\n"
"      key1: \"value1\",\n"
"      key2: \"value2\"\n"
"\n"
"    import_config \"#{Mix.env}.exs\"\n"
"\n"
"All `config/*` macros, including `import_config/1`, are used\n"
"to help define such configuration files.\n"
"\n"
"Furthermore, this module provides functions like `read!/1`,\n"
"`merge/2` and friends which help manipulate configurations\n"
"in general.\n"
msgstr ""

#. TRANSLATORS: defmacro Mix.Config.import_config(file)
#: lib/mix/config.ex:119
msgid ""
"Imports configuration from the given file.\n"
"\n"
"The path is expected to be relative to the directory the\n"
"current configuration file is on.\n"
"\n"
"## Examples\n"
"\n"
"This is often used to emulate configuration across environments:\n"
"\n"
"    import_config \"#{Mix.env}.exs\"\n"
"\n"
"Or to import files from children in umbrella projects:\n"
"\n"
"    import_config \"../apps/*/config/config.exs\"\n"
"\n"
msgstr ""

#. TRANSLATORS: defmacro Mix.Config.config(app, key, opts)
#: lib/mix/config.ex:94
msgid ""
"Configures the given key for the given application.\n"
"\n"
"Keyword lists are always deep merged.\n"
"\n"
"## Examples\n"
"\n"
"The given `opts` are merged into the existing values for `key`\n"
"in the given `app`. Conflicting keys are overridden by the\n"
"ones specified in `opts`. For example, the declaration below:\n"
"\n"
"    config :ecto, Repo,\n"
"      log_level: :warn\n"
"\n"
"    config :ecto, Repo,\n"
"      log_level: :info,\n"
"      pool_size: 10\n"
"\n"
"Will have a final value for `Repo` of:\n"
"\n"
"    [log_level: :info, pool_size: 10]\n"
"\n"
msgstr ""

#. TRANSLATORS: defmacro Mix.Config.config(app, opts)
#: lib/mix/config.ex:64
msgid ""
"Configures the given application.\n"
"\n"
"Keyword lists are always deep merged.\n"
"\n"
"## Examples\n"
"\n"
"The given `opts` are merged into the existing configuration\n"
"for the given `app`. Conflicting keys are overridden by the\n"
"ones specified in `opts`. For example, the declaration below:\n"
"\n"
"    config :lager,\n"
"      log_level: :warn,\n"
"      mode: :truncate\n"
"\n"
"    config :lager,\n"
"      log_level: :info,\n"
"      threshold: 1024\n"
"\n"
"Will have a final configuration of:\n"
"\n"
"    [log_level: :info, mode: :truncate, threshold: 1024]\n"
"\n"
msgstr ""

#. TRANSLATORS: def Mix.Config.merge(config1, config2)
#: lib/mix/config.ex:205
msgid ""
"Merges two configurations.\n"
"\n"
"The configuration of each application is merged together\n"
"with the values in the second one having higher preference\n"
"than the first in case of conflicts.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Mix.Config.merge([app: [k: :v1]], [app: [k: :v2]])\n"
"    [app: [k: :v2]]\n"
"\n"
"    iex> Mix.Config.merge([app1: []], [app2: []])\n"
"    [app1: [], app2: []]\n"
"\n"
msgstr ""
