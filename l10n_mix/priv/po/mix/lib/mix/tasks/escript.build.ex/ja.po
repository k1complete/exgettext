msgid ""
msgstr ""
"Project-Id-Version: l 10n_mix\n"
"PO-Revision-Date: 2015-05-20 22:53+0900\n"
"Last-Translator: 小田 照敬 <EMAIL@ADDRESS>\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. TRANSLATORS: Elixir.Mix.Tasks.Escript.Build Summary
#: lib/mix/tasks/escript.build.ex:1
msgid ""
"Builds an escript for the project.\n"
"\n"
"An escript is an executable that can be invoked from the\n"
"command line.  An escript can run on any machine that has\n"
"Erlang installed and by default does not require Elixir to\n"
"be installed, as Elixir is embedded as part of the escript.\n"
"\n"
"This task guarantees the project and its dependencies are\n"
"compiled and packages them inside an escript.\n"
"\n"
"## Command line options\n"
"\n"
"  * `--force`      - forces compilation regardless of modification times\n"
"  * `--no-compile` - skips compilation to .beam files\n"
"\n"
"## Configuration\n"
"\n"
"The following option must be specified in your `mix.exs` under `:escript`\n"
"key:\n"
"\n"
"  * `:main_module` - the module to be invoked once the escript starts.\n"
"    The module must contain a function named `main/1` that will receive the\n"
"    command line arguments as binaries.\n"
"\n"
"The remaining options can be specified to further customize the escript:\n"
"\n"
"  * `:name` - the name of the generated escript.\n"
"    Defaults to app name.\n"
"\n"
"  * `:path` - the path to write the escript to.\n"
"    Defaults to app name.\n"
"\n"
"  * `:app` - the app to start with the escript.\n"
"    Defaults to app name. Set it to `nil` if no application should\n"
"    be started.\n"
"\n"
"  * `:embed_elixir` - if `true` embed elixir and its children apps\n"
"    (`ex_unit`, `mix`, etc.) mentioned in the `:applications` list inside "
"the\n"
"    `application` function in `mix.exs`.\n"
"\n"
"    Defaults to `true` for Elixir projects, `false` for Erlang projects.\n"
"\n"
"    Note: if you set this to `false` for an Elixir project, you will have to "
"add paths to Elixir's\n"
"    `ebin` directories to `ERL_LIBS` environment variable when running the "
"resulting escript, in\n"
"    order for the code loader to be able to find `:elixir` application and "
"its children\n"
"    applications (if they are used).\n"
"\n"
"  * `:consolidate_protocols` - if `true`, all protocols will be "
"consolidated\n"
"    before being embedded into the escript.\n"
"\n"
"    Defaults to `true` for Elixir projects.\n"
"\n"
"  * `:shebang` - shebang interpreter directive used to execute the escript.\n"
"    Defaults to `\"#! /usr/bin/env escript\\n\"`.\n"
"\n"
"  * `:comment` - comment line to follow shebang directive in the escript.\n"
"    Defaults to `\"\"`.\n"
"\n"
"  * `:emu_args` - emulator arguments to embed in the escript file.\n"
"    Defaults to `\"\"`.\n"
"\n"
"There is one project-level option that affects how the escript is "
"generated:\n"
"\n"
"  * `language: :elixir | :erlang` - set it to `:erlang` for Erlang projects\n"
"    managed by mix. Doing so will ensure Elixir is not embedded by default.\n"
"    Your app will still be started as part of escript loading, with the\n"
"    config used during build.\n"
"\n"
"## Example\n"
"\n"
"    defmodule MyApp.Mixfile do\n"
"      def project do\n"
"        [app: :myapp,\n"
"         version: \"0.0.1\",\n"
"         escript: escript]\n"
"      end\n"
"\n"
"      def escript do\n"
"        [main_module: MyApp.CLI]\n"
"      end\n"
"    end\n"
"\n"
msgstr ""
