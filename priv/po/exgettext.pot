#. TRANSLATORS: defmacro Exgettext.sigil_T(arg1, list2)
#: lib/exgettext.ex:84 
msgid ""
"~T is detect to translate target string.\n"
msgstr ""
#. TRANSLATORS: defmacro Exgettext.txt(s, lang)
#: lib/exgettext.ex:103 
msgid ""
"translate target string by lang.\n"
msgstr ""
#. TRANSLATORS: defmacro Exgettext.txt(s)
#: lib/exgettext.ex:91 
msgid ""
"translate target string by LANG environment.\n"
msgstr ""
#. TRANSLATORS: def Exgettext.setlocale(lang)
#: lib/exgettext.ex:54 
msgid ""
"set locale to Process dictionary :'Exgettext.Lang' \n"
"from lang or LANG environment.\n"
msgstr ""
#. TRANSLATORS: def Exgettext.getlocale()
#: lib/exgettext.ex:63 
msgid ""
"get locale from Process dictionary :'Exgettext.Lang'\n"
msgstr ""
#. TRANSLATORS: def Exgettext.lang(lang)
#: lib/exgettext.ex:44 
msgid ""
"get current 2byte language code from LANG environment variable format.\n"
msgstr ""
#. TRANSLATORS: defmacro Exgettext.Helper.h(other)
#: lib/exgettext/helpler.ex:18 
msgid ""
"Prints the localized documentation for the given module or \n"
"for the given function/arity pair.\n"
"if there is not localized document, prints original documentation.\n"
msgstr ""
#. TRANSLATORS: def Exgettext.Helper.h()
#: lib/exgettext/helpler.ex:7 
msgid ""
"Prints the localized documentation for IEx.Helpers.\n"
"if there is not localized document, prints original documentation.\n"
msgstr ""
#. TRANSLATORS: def Exgettext.Introspection.h(modules, function, arity)
#: lib/exgettext/introspection.ex:81 
msgid ""
"Documentation for the given function and arity in the list of modules.\n"
msgstr ""
#. TRANSLATORS: def Exgettext.Introspection.h(modules, function)
#: lib/exgettext/introspection.ex:39 
msgid ""
"Docs for the given function, with any arity, in any of the modules.\n"
msgstr ""
#. TRANSLATORS: Elixir.Mix.Tasks.L10n.Msginit Summary
#: lib/mix/msginit.ex:1 
msgid ""
"run msginit in GNU gettext utility for current project.\n"
"\n"
"## Synopsis\n"
"\n"
"```\n"
"    mix l10n.msginit [--locale LL_CC.charset]\n"
"```\n"
"\n"
"## Environment\n"
"\n"
"  * LANG -- localize target language for `Language`\n"
"\n"
"## Mix Environment\n"
"\n"
"  * project[:app] -- basename for portable object file.\n"
"\n"
"## Files\n"
"\n"
"### Input\n"
"\n"
"  * priv/po/`app`.pot -- portable object template generated by\n"
"                         l10n.xgettext task.\n"
"\n"
"### Output\n"
"\n"
"  * priv/po/`LANG`.po -- portable object for translation working.\n"
"\n"
msgstr ""
#. TRANSLATORS: Elixir.Mix.Tasks.L10n.Xgettext Summary
#: lib/mix/xgettext.ex:1 
msgid ""
"create portable object template for current project.\n"
"\n"
"## Synopsis\n"
"\n"
"```\n"
"    mix l10n.xgettext [--app src_root]...\n"
"```\n"
"\n"
"## Arguments\n"
"\n"
"  * --app srcroot  -- addional `app` and src_root\n"
"                      for correcting @moduledoc, @doc\n"
"\n"
"## Environment\n"
"\n"
"  * LANG -- localize target language for `Language`\n"
"\n"
"## Mix Environment\n"
"\n"
"  * project[:app] -- basename for portable object file.\n"
"\n"
"## Files\n"
"\n"
"### Input\n"
"\n"
"  * `app`.pot_db -- message database generated by gettext macro.\n"
"\n"
"### Output\n"
"\n"
"  * priv/po/`app`.pot -- portable object template generated by\n"
"                         l10n.xgettext task.\n"
"\n"
msgstr ""
#. TRANSLATORS: Elixir.Mix.Tasks.L10n.Msgfmt Summary
#: lib/mix/msgfmt.ex:1 
msgid ""
"create elixir machine object for current project.\n"
"\n"
"## Synopsis\n"
"\n"
"```\n"
"    mix l10n.msgfmt\n"
"```\n"
"\n"
"## Environment\n"
"\n"
"  * LANG -- localize target language for `Language`\n"
"\n"
"## Mix Environment\n"
"\n"
"  * project[:app] -- basename for portable object file.\n"
"\n"
"## Files\n"
"\n"
"### Input\n"
"\n"
"  * priv/po/`LANG`.po -- portable object for translation working.\n"
"\n"
"### Output\n"
"\n"
"  * priv/lang/`LANG`/`app`.exmo -- machine object dets.\n"
"\n"
msgstr ""
#. TRANSLATORS: Elixir.Exgettext Summary
#: lib/exgettext.ex:1 
msgid ""
"** Localization package for Elixir\n"
"\n"
"*** target\n"
"0. setlocale() \n"
"1. ~T sigil quoted string literal\n"
"2. @moduledoc\n"
"3. @doc\n"
"\n"
"*** example\n"
"  example for the :app application:\n"
"\n"
"  ```\n"
"  use Exgettext\n"
"  def hello do\n"
"    setlocale()  \n"
"    ~T \"Hello, World.\"\n"
"  end\n"
"  ```\n"
"\n"
"  ~T macro expanded to\n"
"\n"
"  ```\n"
"  def hello do\n"
"    Exgettext.setlocale()\n"
"    Exgettext.Runtime.gettext(:app, \"Hello, World.\")\n"
"  end\n"
"  ```\n"
msgstr ""
